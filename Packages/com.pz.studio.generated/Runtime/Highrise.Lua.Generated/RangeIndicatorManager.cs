/*

    Copyright (c) 2025 Pocketz World. All rights reserved.

    This is a generated file, do not edit!

    Generated by com.pz.studio
*/

#if UNITY_EDITOR

using System;
using System.Linq;
using UnityEngine;
using Highrise.Client;
using Highrise.Studio;
using Highrise.Lua;
using UnityEditor;

namespace Highrise.Lua.Generated
{
    [AddComponentMenu("Lua/RangeIndicatorManager")]
    [LuaRegisterType(0x93eb9b9044a0770e, typeof(LuaBehaviour))]
    public class RangeIndicatorManager : LuaBehaviourThunk
    {
        private const string s_scriptGUID = "991cfa6037336d3469c4e7abbbae996d";
        public override string ScriptGUID => s_scriptGUID;

        [Tooltip("The range indicator prefab")]
        [SerializeField] public UnityEngine.GameObject _RangeIndicatorPrefab = default;
        [Tooltip("The radius of the range indicator")]
        [Range(0,100)]
        [SerializeField] public System.Double _Radius = 4;
        [Tooltip("The time to hide the range indicator after it is spawned")]
        [SerializeField] public System.Double _HideAfterTime = 10;
        [Tooltip("Whether to enable the breathing animation")]
        [SerializeField] public System.Boolean _EnableBreathingAnimation = true;
        [Tooltip("The speed of the breathing animation")]
        [SerializeField] public System.Double _AnimationSpeed = 1;
        [Tooltip("Whether to deploy the range indicator to the assigned object")]
        [SerializeField] public System.Boolean _DeployToAssignedObject = false;
        [Tooltip("Whether to test the range indicator")]
        [SerializeField] public System.Boolean _TestDemo = true;
        [Tooltip("The time to spawn the range indicator after the game starts")]
        [SerializeField] public System.Double _TestDemoSpawnAfterTime = 5;
        [Tooltip("The color of the range indicator")]
        [SerializeField] public UnityEngine.Color _Color = new Color(1f, 1f, 1f, 1f);

        protected override SerializedPropertyValue[] SerializeProperties()
        {
            if (_script == null)
                return Array.Empty<SerializedPropertyValue>();

            return new SerializedPropertyValue[]
            {
                CreateSerializedProperty(_script.GetPropertyAt(0), _RangeIndicatorPrefab),
                CreateSerializedProperty(_script.GetPropertyAt(1), _Radius),
                CreateSerializedProperty(_script.GetPropertyAt(2), _HideAfterTime),
                CreateSerializedProperty(_script.GetPropertyAt(3), _EnableBreathingAnimation),
                CreateSerializedProperty(_script.GetPropertyAt(4), _AnimationSpeed),
                CreateSerializedProperty(_script.GetPropertyAt(5), _DeployToAssignedObject),
                CreateSerializedProperty(_script.GetPropertyAt(6), _TestDemo),
                CreateSerializedProperty(_script.GetPropertyAt(7), _TestDemoSpawnAfterTime),
                CreateSerializedProperty(_script.GetPropertyAt(8), _Color),
            };
        }
        
#if HR_STUDIO
        [MenuItem("CONTEXT/RangeIndicatorManager/Edit Script")]
        private static void EditScript()
        {
            VisualStudioCodeOpener.OpenPath(AssetDatabase.GUIDToAssetPath(s_scriptGUID));
        }
#endif
    }
}

#endif
